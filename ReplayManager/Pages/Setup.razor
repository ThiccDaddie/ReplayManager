@page "/setup"

@using ReplayManager.Services;
@using System.IO;
@using Microsoft.Extensions.Options;
@using ReplayManager.Models;
@using Ookii.Dialogs.Wpf;

@namespace ReplayManager.Pages
@inject NavigationManager Navigation
@inject IOptionsMonitor<ReplayManagerOptions> Options
@inject IOptionsWriter OptionsService
@inject IReplayLoadingService ReplayLoadingService

@if (Options.CurrentValue.ReplayDirectories.Any())
{
	<Redirect Url="/" />
}
else
{
	<div class="main">
		<div class="title-image">
			<RoundTitleImage />
		</div>
		<MatH6 Class="title">First time, huh? Where are your replays?</MatH6>
		<div class="directories-picker-wrapper">
			<MatCard Class="directory-list">
				<MatOverline>pick from these...</MatOverline>
				<MatList>
					@foreach ((string path, int index) in foundPaths
.Where(path => !chosenPaths.Contains(path))
.Select((item, index) => (item, index)))
					{
						<MatListItem Style="display:flex; justify-content: space-between;">
							<MatListItemText>
								@path
							</MatListItemText>
							<MatIconButton Icon="add_circle_outline" OnClick="@(() => AddChosenPath(path))" />
						</MatListItem>
						@if (index < foundPaths.Count - 1)
						{
							<MatDivider></MatDivider>}}

				</MatList>
			</MatCard>

			<MatCard>
				<EditForm Model="@formModel" OnValidSubmit="@AddDirectory">
					<MatOverline Class="directory-picker-title">
						...or choose them manually like a scrub...
					</MatOverline>
					<p class="directory-picker">
						<MatStringField @bind-Value="formModel.Path"
										Icon="folder_open"
										Style="width: 350px;"
										IconTrailing="true"
										Label="Replays folder"
										IconOnClick="@ShowDirectoryDialog">
						</MatStringField>
						<ValidationMessage For="@(() => formModel.Path)" />
					</p>
					<CustomValidator @ref="@customValidator" />
					<p>
						<MatButton Type="submit">Add</MatButton>
					</p>
				</EditForm>
			</MatCard>

			<MatCard Class="directory-list">
				<MatOverline>... and here they are!</MatOverline>
				<MatList>
					@foreach ((string path, int index) in chosenPaths.Select((item, index) => (item, index)))
					{
						<MatListItem>
							@path
							<MatIconButton Icon="remove_circle_outline" OnClick="@(() => RemoveChosenPath(path))" />
						</MatListItem>}
				</MatList>
			</MatCard>
		</div>
		<div class="footer">
			<MatButton Disabled="@(!chosenPaths.Any())"
					   OnClick="@Finish"
					   Raised="true">
				Done
			</MatButton>
		</div>
	</div>}

@code { FormModel formModel = new();
	ReplayManagerOptions options = new();
	CustomValidator customValidator;
	IDisposable onOptionsUpdated;
	HashSet<string> foundPaths = new();
	HashSet<string> chosenPaths = new();
	bool canFinish;

	protected override void OnInitialized()
	{
		foundPaths = new(FindReplayFolders());
	}

	void AddChosenPath(string path)
	{
		chosenPaths.Add(path);
		OnChosenPathChanged();
	}

	void RemoveChosenPath(string path)
	{
		chosenPaths.Remove(path);
		OnChosenPathChanged();
	}

	void OnChosenPathChanged()
	{
		StateHasChanged();
		canFinish = false;
	}

	IEnumerable<string> FindReplayFolders()
	{
		return
		DriveInfo.GetDrives()
		.ToList()
		.SelectMany((drive =>
		{
			IEnumerable<string> paths = new List<string>();
			DirectoryInfo directoryInfo = drive.RootDirectory;
			string gamesPath = Path.Combine(directoryInfo.FullName, "games");
			if (Directory.Exists(gamesPath))
			{
				string[] wotFolders = Directory.GetDirectories(gamesPath, "World_of_Tanks*");
				paths = wotFolders
					.Select(wotFolder =>
					{
						return Path.Combine(wotFolder, "replays");
					})
					.Where(path => Directory.Exists(path));
			}
			return paths;
		}));
	}

	void ShowDirectoryDialog()
	{
		VistaFolderBrowserDialog browser = new()
		{
			Description = "Select folder(s)",
			UseDescriptionForTitle = true
		};

		if ((bool)browser.ShowDialog())
		{
			formModel.Path = browser.SelectedPath;
		}
	}

	void AddDirectory()
	{
		customValidator.ClearErrors();

		if (string.IsNullOrEmpty(formModel.Path))
		{
			customValidator.DisplayError(
				nameof(formModel.Path),
				new()
				{
						"You donkey, you forgot this!"
					});
		}

		else if (!Directory.Exists(formModel.Path))
		{
			customValidator.DisplayError(
				nameof(formModel.Path),
				new()
				{
						"The path is invalid."
					});
		}

		else
		{
			chosenPaths.Add(formModel.Path);
			formModel.Path = string.Empty;
		}
	}

	async void Finish()
	{
		await OptionsService.WriteOptionsAsync(options with { ReplayDirectories = chosenPaths.ToList() });
		chosenPaths = new();
		onOptionsUpdated = Options.OnChange((options, _) =>
		{
			if (options.ReplayDirectories.Any())
			{
				Navigation.NavigateTo("/");
				var filePaths = options.ReplayDirectories.SelectMany(path => Directory.EnumerateFiles(path, "*.wotreplay", SearchOption.AllDirectories));
				ReplayLoadingService.LoadReplays(filePaths);
				onOptionsUpdated.Dispose();
			}
		});
	}

	private class FormModel
	{
		public string Path { get; set; }
	} }
