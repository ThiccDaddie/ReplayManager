@using ThiccDaddie.ReplayManager.Shared
@using System.Linq
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using ThiccDaddie.ReplayManager.Client.Services

@inject ReplaySortService ReplaySortService
@namespace ThiccDaddie.ReplayManager.Client.Components

<div class="replay-list">
	<MatList Class="replay-list-items" Style="flex-grow: 1;">
		@foreach ((ReplayInfo replay, int index) in Replays.Select((replay, index) => (replay, index)))
		{
<ReplayListItem ReplayInfo="@replay"></ReplayListItem> if (index < Replays.Count - 1)
{
<MatDivider></MatDivider>}
}
	</MatList>

	<MatPaginator PageSizeOptions="@PageSizeOptions" PageSize="@PageSize" Length="@Length" Page="@((data) => MySubject.OnNext(data))" PageLabel="@PageLabel">

	</MatPaginator>
</div>


@code { [Parameter]
	public List<ReplayInfo> Replays { get; set; }
	int PageSize { get; set; }
	int PageIndex { get; set; }
	int Length { get; set; }
	string PageLabel { get; set; }

	Subject<MatPaginatorPageEvent> MySubject { get; set; }

	IReadOnlyList<MatPageSizeOption> PageSizeOptions { get; set; } = new List<MatPageSizeOption>()
{
		new MatPageSizeOption(int.MaxValue, "fit"),
		new MatPageSizeOption(5),
		new MatPageSizeOption(10),
		new MatPageSizeOption(25),
		new MatPageSizeOption(100)
		};

	protected override void OnInitialized()
	{
		MySubject = new Subject<MatPaginatorPageEvent>();
		MySubject.Throttle(TimeSpan.FromMilliseconds(100))
					  .Subscribe(events => OnPage(events));
		ReplaySortService.SetReplays(Replays);

		var initialPageSizeOptions = PageSizeOptions.ElementAtOrDefault(1);
		PageSize = initialPageSizeOptions.Value;
		PageLabel = initialPageSizeOptions.Text;
		ApplyPaging();
	}

	void OnPage(MatPaginatorPageEvent e)
	{
		PageIndex = e.PageIndex;
		PageSize = e.PageSize;
		PageLabel = PageSizeOptions.FirstOrDefault(options => options.Value == e.PageSize).Text;
		ApplyPaging();
		StateHasChanged();
	}

	void ApplyPaging()
	{
		Replays = ReplaySortService.OrderedReplayInfos.Skip(PageSize * PageIndex).Take(PageSize).ToList();
	}}
